{"version":3,"sources":["components/layout/Wrapper.tsx","assets/pokeball.svg","components/layout/HomeHeader.tsx","helpers/contrast-color.ts","components/ui/Spinner.tsx","components/Pokemon/PokemonCard.tsx","components/Pokemon/PokemonList.tsx","pages/HomePage.tsx","pages/PokemonPage.tsx","pages/SearchPage.tsx","routers/AppRouter.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["WrapperStyled","styled","div","Wrapper","children","HomeHeaderStyled","header","HomeHeader","src","pokeball","alt","rgbToYIQ","r","g","b","hexToRgb","hex","undefined","result","exec","parseInt","spin","keyframes","SpinnerStyled","props","className","align","Spinner","forwardRef","ref","role","aria-label","PokemonCardStyled","li","backgroundColor","isLoading","colorHex","threshold","rgb","contrast","PokemonCard","pokemonId","name","artworkUrl","usePalette","data","loading","error","useState","isImageLoading","setImageLoading","muted","onLoad","PokemonListStyled","ul","PokemonList","pokemons","setPokemons","page","setPage","spinnerRef","useRef","nextPageRef","useEffect","a","fetch","resp","json","results","current","next","getPokemons","observer","window","IntersectionObserver","handleObserver","root","rootMargin","observe","entities","isIntersecting","map","url","split","HomePage","PokemonPage","SearchPage","AppRouter","basename","path","exact","to","App","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e2f4a3c6.chunk.js","sourcesContent":["import { PropsWithChildren } from 'react';\nimport styled from 'styled-components';\n\nconst WrapperStyled = styled.div`\n\tmargin: 0 auto;\n\tmax-width: 120rem;\n\tpadding: 0 2rem;\n\twidth: 100%;\n`;\n\nfunction Wrapper({ children }: PropsWithChildren<{}>) {\n\treturn <WrapperStyled>{children}</WrapperStyled>;\n}\n\nexport default Wrapper;\n","export default __webpack_public_path__ + \"static/media/pokeball.0f112db8.svg\";","import styled from 'styled-components';\nimport Wrapper from './Wrapper';\nimport pokeball from '../../assets/pokeball.svg';\n\nconst HomeHeaderStyled = styled.header`\n\tposition: relative;\n\theight: 20rem;\n\timg {\n\t\tdisplay: block;\n\t\theight: 24.8rem;\n\t\twidth: 24.8rem;\n\t\tposition: absolute;\n\t\tright: -1rem;\n\t\tz-index: -1;\n\t}\n\th1 {\n\t\tfont-size: 3rem;\n\t\tletter-spacing: 1px;\n\t\tline-height: 20rem;\n\t}\n`;\n\nfunction HomeHeader() {\n\treturn (\n\t\t<HomeHeaderStyled>\n\t\t\t<Wrapper>\n\t\t\t\t<img src={pokeball} alt=\"pokeball\" />\n\t\t\t\t<h1>Pokedex</h1>\n\t\t\t</Wrapper>\n\t\t</HomeHeaderStyled>\n\t);\n}\n\nexport default HomeHeader;\n","interface RGB {\n\tr: number;\n\tg: number;\n\tb: number;\n}\nfunction rgbToYIQ({ r, g, b }: RGB): number {\n\treturn (r * 299 + g * 587 + b * 114) / 1000;\n}\nfunction hexToRgb(hex: string): RGB | undefined {\n\tif (!hex || hex === undefined || hex === '') {\n\t\treturn undefined;\n\t}\n\n\tconst result: RegExpExecArray | null = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\n\t\thex\n\t);\n\n\treturn result\n\t\t? {\n\t\t\t\tr: parseInt(result[1], 16),\n\t\t\t\tg: parseInt(result[2], 16),\n\t\t\t\tb: parseInt(result[3], 16),\n\t\t  }\n\t\t: undefined;\n}\n\nexport function contrast(\n\tcolorHex: string | undefined,\n\tthreshold: number = 128\n): string {\n\tif (colorHex === undefined) {\n\t\treturn '#000';\n\t}\n\n\tconst rgb: RGB | undefined = hexToRgb(colorHex);\n\n\tif (rgb === undefined) {\n\t\treturn '#000';\n\t}\n\n\treturn rgbToYIQ(rgb) >= threshold ? '#000' : '#fff';\n}\n","import { forwardRef } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\ninterface SpinnerProps {\n\talign?: string;\n\tclassName?: string;\n}\n\nconst spin = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst SpinnerStyled = styled.div<SpinnerProps>`\n\tborder-top: 0.2rem solid #fff;\n\tborder-radius: 50%;\n\theight: 2.5rem;\n\tdisplay: ${(props) => (props.className === 'visible' ? 'block' : 'none')};\n\twidth: 2.5rem;\n\tmargin-left: ${(props) =>\n\t\tprops.align === 'right' || props.align === 'center' ? 'auto' : 0};\n\tmargin-right: ${(props) =>\n\t\tprops.align === 'left' || props.align === 'center' ? 'auto' : 0};\n\tanimation: ${spin} 1s linear infinite;\n`;\n\nconst Spinner = forwardRef<HTMLDivElement, SpinnerProps>(\n\t({ align, className = 'visible' }: SpinnerProps, ref) => {\n\t\treturn (\n\t\t\t<div ref={ref} role=\"status\" aria-label=\"Loading...\">\n\t\t\t\t<SpinnerStyled className={className} align={align} />\n\t\t\t</div>\n\t\t);\n\t}\n);\n\nexport default Spinner;\n","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { usePalette } from 'react-palette';\nimport { contrast } from '../../helpers/contrast-color';\nimport Spinner from '../ui/Spinner';\n\ninterface PokemonCardProps {\n\tpokemonId: number;\n\tname: string;\n}\n\ninterface PokemonCardStyledProps {\n\tbackgroundColor: string | undefined;\n\tisLoading: boolean;\n}\n\n// const zoomIn = keyframes`\n//   from {\n//     transform: scale3d(0, 0, 0);\n//   }\n//   to {\n//     transform: scale3d(1, 1, 1);\n//   }\n// `;\n\n// const zoomInAnimation = () =>\n// \tcss`\n// \t\tanimation: ${zoomIn} 0.3s 0.5s ease forwards;\n// \t`;\n\nconst PokemonCardStyled = styled.li<PokemonCardStyledProps>`\n\tbackground-color: ${(props) => props.backgroundColor};\n\tborder-radius: 0.5rem;\n\tcursor: pointer;\n\theight: ${(props) => (props.isLoading ? '10rem' : '20rem')};\n\tpadding: 1.5rem 0.4rem;\n\tpadding-right: ${(props) => (props.isLoading ? '1rem' : '0.4rem')};\n\twidth: 100%;\n\ttransition: background-color 0.5s ease, height 0.5s ease;\n\tp {\n\t\tcolor: ${(props) => contrast(props.backgroundColor)};\n\t\tfont-size: 2rem;\n\t\tfont-weight: 500;\n\t\tletter-spacing: 0.5px;\n\t\tmargin: 0 0 0rem 1rem;\n\t\ttext-transform: capitalize;\n\t}\n\timg {\n\t\tdisplay: block;\n\t\theight: 100%;\n\t\tmargin-left: auto;\n\t\tmax-width: 100%;\n\t\tobject-fit: cover;\n\t\ttransform: ${(props) =>\n\t\t\tprops.isLoading ? 'scale3d(0, 0, 0)' : 'scale3d(1, 1, 1)'};\n\t\ttransition: transform 0.3s 0.5s ease;\n\t}\n\t&:hover img {\n\t\ttransform: translate3d(-1.5rem, 0, 0);\n\t\ttransition-delay: 0s;\n\t}\n`;\n\nfunction PokemonCard({ pokemonId, name }: PokemonCardProps) {\n\tconst artworkUrl: string = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemonId}.png`;\n\n\tconst { data, loading, error } = usePalette(artworkUrl);\n\n\tconst [isImageLoading, setImageLoading] = useState(true);\n\n\treturn (\n\t\t<PokemonCardStyled\n\t\t\tbackgroundColor={data.muted || 'gray'}\n\t\t\tisLoading={isImageLoading}\n\t\t>\n\t\t\t<p>{name}</p>\n\t\t\t{loading ? (\n\t\t\t\t<Spinner align=\"right\" />\n\t\t\t) : !loading && error ? (\n\t\t\t\t<p>Image not found</p>\n\t\t\t) : (\n\t\t\t\t<img\n\t\t\t\t\tsrc={artworkUrl}\n\t\t\t\t\talt=\"Pokémon\"\n\t\t\t\t\tonLoad={() => {\n\t\t\t\t\t\tsetImageLoading(false);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</PokemonCardStyled>\n\t);\n}\n\nexport default PokemonCard;\n","import { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport {\n\tResourceGeneralResponse,\n\tResult,\n} from '../../interfaces/resource-general-response.interface';\nimport Wrapper from '../layout/Wrapper';\nimport PokemonCard from './PokemonCard';\nimport Spinner from '../ui/Spinner';\n\nconst PokemonListStyled = styled.ul`\n\tlist-style: none;\n\tmargin: 0;\n\tmargin-bottom: 2rem;\n\tpadding: 0;\n\tdisplay: grid;\n\tgrid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));\n\tgrid-gap: 2rem 0.6rem;\n`;\n\nfunction PokemonList() {\n\tconst [pokemons, setPokemons] = useState<Result[]>([]);\n\n\tconst [page, setPage] = useState('https://pokeapi.co/api/v2/pokemon');\n\n\tconst spinnerRef = useRef<HTMLDivElement>(null);\n\n\tconst nextPageRef = useRef<string | null>(null);\n\n\tuseEffect(() => {\n\t\tconst getPokemons = async () => {\n\t\t\tif (!page) return;\n\t\t\tconst resp = await fetch(page);\n\t\t\tconst data: ResourceGeneralResponse = await resp.json();\n\t\t\tsetPokemons((pokemons) => [...pokemons, ...data.results]);\n\t\t\tnextPageRef.current = data.next;\n\t\t};\n\t\tgetPokemons();\n\t}, [page]);\n\n\tuseEffect(() => {\n\t\tconst options = {\n\t\t\troot: null,\n\t\t\trootMargin: '10px',\n\t\t\tthreshold: 1.0,\n\t\t};\n\n\t\tconst observer = new window.IntersectionObserver(\n\t\t\thandleObserver,\n\t\t\toptions\n\t\t);\n\t\tif (spinnerRef.current) {\n\t\t\tobserver.observe(spinnerRef.current);\n\t\t}\n\t}, []);\n\n\tconst handleObserver = (\n\t\tentities: IntersectionObserverEntry[],\n\t\tobserver: IntersectionObserver\n\t) => {\n\t\tconst target = entities[0];\n\t\tif (target.isIntersecting) {\n\t\t\tsetPage(nextPageRef.current || '');\n\t\t}\n\t};\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t<PokemonListStyled>\n\t\t\t\t{pokemons.map(({ name, url }: Result) => (\n\t\t\t\t\t<PokemonCard\n\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\tname={name}\n\t\t\t\t\t\tpokemonId={+url.split('/')[6]}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</PokemonListStyled>\n\t\t\t<Spinner\n\t\t\t\tref={spinnerRef}\n\t\t\t\talign=\"center\"\n\t\t\t\tclassName={page ? 'visible' : 'hidden'}\n\t\t\t/>\n\t\t</Wrapper>\n\t);\n}\n\nexport default PokemonList;\n","import HomeHeader from '../components/layout/HomeHeader';\nimport PokemonList from '../components/Pokemon/PokemonList';\n\nfunction HomePage() {\n\treturn (\n\t\t<>\n\t\t\t<HomeHeader />\n\t\t\t<PokemonList />\n\t\t</>\n\t);\n}\n\nexport default HomePage;\n","function PokemonPage() {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Pokemon Page</h1>\n\t\t</div>\n\t);\n}\n\nexport default PokemonPage;\n","function SearchPage() {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Search Page</h1>\n\t\t</div>\n\t);\n}\n\nexport default SearchPage;\n","import {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n\tRedirect,\n} from 'react-router-dom';\nimport HomePage from '../pages/HomePage';\nimport PokemonPage from '../pages/PokemonPage';\nimport SearchPage from '../pages/SearchPage';\n\nfunction AppRouter() {\n\treturn (\n\t\t<Router basename=\"/pokemon-app\">\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/\" exact={true}>\n\t\t\t\t\t<HomePage />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/search\">\n\t\t\t\t\t<SearchPage />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/pokemon/:id\">\n\t\t\t\t\t<PokemonPage />\n\t\t\t\t</Route>\n\t\t\t\t<Redirect to=\"/\" />\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n}\n\nexport default AppRouter;\n","import AppRouter from './routers/AppRouter';\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<AppRouter />\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}